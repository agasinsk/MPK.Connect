// <auto-generated />
using System;
using MPK.Connect.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MPK.Connect.DataAccess.Migrations.SimpleMpk
{
    [DbContext(typeof(SimpleMpkContext))]
    [Migration("20181107185613_Update")]
    partial class Update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MPK.Connect.Model.Agency", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FareUrl");

                    b.Property<string>("Language");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<string>("Timezone")
                        .IsRequired();

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("MPK.Connect.Model.Calendar", b =>
                {
                    b.Property<string>("ServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("Friday");

                    b.Property<bool>("Monday");

                    b.Property<bool>("Saturday");

                    b.Property<DateTime>("StartDate");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("ServiceId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("MPK.Connect.Model.Route", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgencyId");

                    b.Property<string>("Color");

                    b.Property<string>("Description");

                    b.Property<string>("LongName")
                        .IsRequired();

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("SortOrder");

                    b.Property<string>("TextColor");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("MPK.Connect.Model.Stop", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<double>("Latitude");

                    b.Property<int>("LocationType");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ParentStation");

                    b.Property<string>("Timezone");

                    b.Property<string>("Url");

                    b.Property<int>("WheelchairBoarding");

                    b.Property<string>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("MPK.Connect.Model.StopTime", b =>
                {
                    b.Property<string>("TripId");

                    b.Property<string>("StopId");

                    b.Property<int>("StopSequence");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<int>("DropOffTypes");

                    b.Property<string>("HeadSign");

                    b.Property<int>("PickupType");

                    b.Property<double?>("ShapeDistTraveled");

                    b.Property<int>("TimePoint");

                    b.HasKey("TripId", "StopId", "StopSequence");

                    b.HasIndex("StopId");

                    b.ToTable("StopTimes");
                });

            modelBuilder.Entity("MPK.Connect.Model.Trip", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BikesAllowed");

                    b.Property<string>("BlockId");

                    b.Property<int?>("DirectionId");

                    b.Property<string>("HeadSign");

                    b.Property<string>("RouteId")
                        .IsRequired();

                    b.Property<string>("ServiceId");

                    b.Property<string>("ShapeId");

                    b.Property<string>("ShortName");

                    b.Property<int>("WheelchairAccessible");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("MPK.Connect.Model.Route", b =>
                {
                    b.HasOne("MPK.Connect.Model.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("MPK.Connect.Model.StopTime", b =>
                {
                    b.HasOne("MPK.Connect.Model.Stop", "Stop")
                        .WithMany()
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPK.Connect.Model.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPK.Connect.Model.Trip", b =>
                {
                    b.HasOne("MPK.Connect.Model.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPK.Connect.Model.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
